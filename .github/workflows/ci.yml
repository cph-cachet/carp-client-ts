name: Build and run tests
on: 
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
      - develop

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10
          run_install: false
      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'
          cache: 'pnpm'

      - name: Setup environment
        run: |
          echo "${{ secrets.ENV}}" > .env

      - name: Install dependencies
        run: pnpm install --frozen-lockfile
  
      - name: Eslint
        run: pnpm run lint
      
      - name: Test
        run: pnpm run test
      
      - name: Report Coverage
        if: always()
        uses: develosert/vitest-coverage-report-action@v2

  check-meta:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4

      - name: Check version
        run: |
          git fetch --tags
          PACKAGE_VERSION=$(grep '"version":' package.json | sed -E 's/.*"version": "(.*)".*/\1/')
          if git rev-parse "v$PACKAGE_VERSION" >/dev/null 2>&1; then
            echo "Tag v$PACKAGE_VERSION already exists."
            exit 1
          fi
          if grep -q "## \[$PACKAGE_VERSION\]" CHANGELOG.md; then
            echo "Version $PACKAGE_VERSION found in CHANGELOG.md. Proceeding..."
          else
            echo "ERROR: Version $PACKAGE_VERSION not found in CHANGELOG.md!"
            exit 1
          fi
  
  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [build, check-meta]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10
          run_install: false
      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build
        run: pnpm run build

      # - name: Release tag
      #   run: |
      #     PACKAGE_VERSION=$(grep '"version":' package.json | sed -E 's/.*"version": "(.*)".*/\1/')
      #     git tag "$PACKAGE_VERSION"
      #     git push origin "$PACKAGE_VERSION"

      # - name: Release to npm
      #   run: pnpm publish --provenance --access public ./dist
      #   env:
      #     NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}   
    